#|

CS 2800 Homework 2 - Fall 2014

Student names: This homework is done in pairs. PUT BOTH NAMES HERE.

Although this homework will be "text-only", you will need to use ACL2s. The
idea is to get used to the ACL2s Eclipse editor, to ACL2s style comments,
and to the way homeworks are submitted in this class, as described below.

Technical instructions:

- open this file in ACL2s as hw02.lisp

- insert your solutions into this file where indicated (usually as "...")

- only add to the file. Do not remove or comment out anything pre-existing.

- when done, save your file and submit it as hw02.lisp.

- for this homework, you do not actually have to subject your solutions to
  ACL2s -- the homework is text-only and enclosed in comments, so it will
  be ignored by ACL2s.

The line at the top of this file begins an ACL2s comment, the line
following this sentence ends it:

|#

#|

In this homework we use the following ascii character combinations to
represent the Boolean operators:

  NOT     ~

  AND     /\
  OR      \/

  IMPLIES =>

  EQUIV   =
  XOR     <>

The binding powers of these functions are listed from highest to lowest
in the above table. Within one group (no blank line), the binding powers
are equal.

|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; A. Truth tables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|

Construct the truth table for the following Boolean formula. Use
*alphabetical* order for the variables in the formula. Include result
columns for all relevant subformulas -- no shortcuts. For example, if the
formula contains the propositional variable x in negated form, then you
need a column for the subformula ~x.

Then decide whether the formula is satisfiable, unsatisfiable, valid, or
falsifiable (several of these predicates will hold).

Carefully think about binding powers -- if needed, add parentheses to make
it clear (to you) how this formula is to be parsed.

1.  (p => q) /\ (~r => ~q) = p => r

For this formula, your table should have 10 columns (including those for p,q,r).

With (redundant but helpful) parentheses:

((p => q) /\ (~r => ~q)) = (p => r)

p | q | r | p => q | ~r | ~q | ~r => ~q | /\ | p => r | =
----------------------------------------------------------
T   T   T     T      F    F       T       T      T      T
T   T   F     T      T    F       F       F      F      T
T   F   T     F      F    T       T       F      T      F
T   F   F     F      T    T       T       F      F      T
F   T   T     T      F    F       T       T      T      T
F   T   F     T      T    F       F       F      T      F
F   F   T     T      F    T       T       T      T      T
F   F   F     T      T    T       T       T      T      T

As can be seen from the truth table, this formula is satisfiable and falsifiable.

2. Someone suggests to introduce a new Boolean connective, *, such that
   a * b abbreviates the expression ~(~a /\ b).

(a) Formally define this connective, using a truth table.

a   b   a * b
-------------
T   T     T
T   F     T
F   T     F
F   F     T

(b) Do we really need this new connective, or can you express a * b using a
single connective that we already know?

a * b = b => a , so it is redundant.

|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; B. Boolean formula simplification
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|

Simplify the following formulas, i.e. find a simpler formula that is
logically equivalent to the given formula. "Simpler" means: with as few
logical connectives as possible. For example, the formula

(p \/ (p => q))

is a tautology. The simplest equivalent formula is therefore T.

In general, there may be several solutions that can be viewed as
"equally simple", e.g., a \/ b and b \/ a are both "simplest".

Find the answer by applying a suitable selection of simplification and
rewrite rules, as discussed in class and listed in the Lecture Notes. You
need some creativity here. It is useful to think one step ahead when
applying a rule: sometimes it may be required to build an intermediate
formula that is more complex than the one you started from, in order to
then be able to simplify the result drastically.

If all else fails, use this strategy: rewrite the formula using only the
"elementary" connectives ~   \/   and /\   , and simplify that as much as
possible, using basic identities such as p /\ ~p = F. At the end see if you
can write the result using fewer connectives, e.g. by combining ~p \/ q to
p => q.

Write your simplification/rewrite steps in the following format:

  (~p \/ ~q) /\ T

=

  (~p \/ ~q)

= { de Morgan }

  ~(p /\ q)

As shown above, give the name of the rule you are using if possible; this
may help us give you partial credit if you make a mistake.

3.  (a \/ ~b) => (c /\ ~a) \/ ~b

= { implication rule }
  (~a /\ b) \/ (c /\ ~a) \/ ~b
= { distributing the final \/ over the first /\ }
  ~a \/ ~b \/ (c /\ ~a)
= { absorption law }
  ~a \/ ~b
= { implication rule }
  a => ~b

4.  ( p /\ ( ~p \/ q)) \/ ((p \/ ~q) /\ q)

= { by distribution of /\ over \/}   
  (p /\ ~p) \/ (p /\ q) \/ ((p \/ ~q) /\ q)   
= { by p & ~p = False}   
  (p /\ q) \/ ((p \/ ~q) /\ q)   
= { by distribution of \/ over /\}   
  ( p /\ q ) \/ ((p /\q) \/ (~q /\ q))   
= { by x & ~x = False}   
  (p /\ q) \/ (p /\ q)    
= { by x \/ x = x}   
  p /\ q 


5.  ~(~h /\ i) => (i => (~h /\ j))

= { de Morgen; implication rule }
  (h \/ ~i) => (~i \/ (~h /\ j))
= { implication rule }
  (~h /\ i) \/ ~i \/ (~h /\ j)
= { distributing \/ over first /\ }
  ((~h \/ ~i) /\ (i \/ ~i)) \/ (~h /\ j)
= { i \/ ~i = T , x /\ T = x }
  (~h \/ ~i) \/ (~h /\ j)
= { absorption }
  ~i \/ ~h
= { implication rule }
  h => ~i

|#


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; C. Boolean formula classification
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|

Boolean functions can be valid, satisfiable, unsatisfiable, or falsifiable.
These properties can overlap. For example, valid functions are also
satisfiable.

Determine the status of the following Boolean formulas, regarding these
properties. You must state ALL of the four properties a formula fulfills.

Give evidence for your decisions, as follows:

- simplify valid formulas to T, or show the truth table,
- simplify unsatisfiable formulas to F, or show truth table,
- give a suitable satisfying or falsifying assignment for satisfiable and
  for falsifiable formulas.

6.  a \/ ~b => ((a => b) = (a = b))

valid, sat:

=
  (b => a) => ((a => b) = ((a => b) /\ (b => a)))

= { (p = p /\ q) = ~p \/ q }

  (b => a) => (~(a => b) \/ (b => a))
=
  ~(b => a) \/ ~(a => b) \/ (b => a)

= T


7.  ((e /\ ~(g => (e \/ h))) \/ (~e /\ (h => e))) => (e \/ h)

sat, falsifiable:

sat:   e = T, others arbitrary.
false: e = h = F, g arbitrary.


8.  (x = ~z) /\ (~x <> z)

= { (a = ~b) = ~(a = b), (a <> ~b) = ~(a <> b) }

  ~(x = z) /\ ~(x <> z)

= { de Morgan }

  ~((x = z) \/ (x <> z))
=
  ~T
=
  F

equivalent to F, hence unsatisfiable and falsifiable.

|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; D. Expressiveness of Boolean connectives
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|

For the following problems, show that you can express the Boolean
connective on the left of the = using ONLY the Boolean connective(s)
mentioned in { } on the right, plus the propositional constants T and F and
parentheses if needed. For example, if your task was:

x \/ y  =  { express using ~ , /\ , T , F , () }

your answer would be:

x \/ y  =  ~(~x /\ ~y)

the justification being de Morgan's law. You do not have to give a
justification for these problems.

9.  ~x    =    { express using => , T , F , () }

~x    =    x => F

10.  ~x    =    { express using <> , T , F , () }

~x    =    x <> T

11.  x /\ y  =  { express using NAND , T , F , () , where NAND ("not and")
                  is the binary connective defined by NAND(x,y) = ~(x /\ y) }

x /\ y = ~(~(x /\ y)) = ~(NAND(x,y)) = NAND(NAND(x,y),NAND(x,y))

|#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; E. Problem solving using propositional logic
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#|

12. You are given three labeled boxes: two are empty, one contains money;
but you don't know which one. The labels on boxes 1 and 2 read, "This box
is empty"; the label on box 3 reads "The money is in box 2". You also know
that exactly one label tells the truth. The question is: where is the
money?

Formalize the puzzle as a satisfiability problem, and solve it, as follows.

(a) Define propositional variables to represent relevant atomic facts
(whose truth we currently do not know).

Hint: relevant facts may include whether a particular label tells the
truth, and whether a particular box contains the money.

t1,t2,t3 = the label of box 1,2,3 tells the truth,
m1,m2,m3 = the money is in box 1,2,3, respectively.

(b) Using these variables, formulate the knowledge given in the problem as
propositional formulas. Be careful with the statement that exactly one
label tells the truth: it means that one tells the truth (we don't know
which one) and the other two "lie".

In the following, the semicolon and the text following it are comments.

( (m1 /\ ~m2 /\ ~m3) \/ (~m1 /\ m2 /\ ~m3) \/ (~m1 /\ ~m2 /\ m3) ) /\ ; exactly one box contains the money
( ( ~m1 /\  m2 /\ ~m2 ) \/ ; label 1 tells the truth
  (  m1 /\ ~m2 /\ ~m2 ) \/ ; label 2 tells the truth
  (  m1 /\  m2 /\  m2 ) )  ; label 3 tells the truth

(c) Show that the formula you have found in (b) is satisfiable. State where
the money is, and which label tells the truth, according to the satisfying
assignment. You may use simplifications, or truth tables.

One solution is easy to see without much formula manipulation,
and without any truth tables: m1 /\ ~m2 /\ ~m3 .
The money is in box 1; label 2 tells the truth.

(d) Someone objects: "What if there are several solutions? Then we still
don't know where the money is!" You have to admit that the person is right.
Think about how we could figure out, using propositional logic, whether the
solution we found is unique. Then apply your idea to this problem. What do
you find?

The idea is to check whether the formula is satisfiable even under the
additional constraint that the solution must differ from the one already
found.

For example, suppose your formula f is over variables x,y,z, and you found
that x=y=T, z=F is a satisfying solution. The next step is then to check
whether the formula

f'  =   f /\ ~(x /\ y /\ ~z) 

is satisfiable. The subformula ~(x /\ y /\ ~z) is called a _blocking
clause_ : it blocks the solution x=y=T,z=F from being reported again.

Applying this idea to the problem at hand, we get:

f' =   f /\ ~(m1 /\ ~m2 /\ ~m3)  ,
where f is the (big) formula from above.
Formula f' is unsatisfiable, i.e. there is no other solution!

|#
